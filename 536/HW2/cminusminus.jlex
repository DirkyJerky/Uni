import java_cup.runtime.Symbol;
// The generated scanner will return a Symbol for each token that it finds.
// A Symbol contains an Object field named value; that field will be of type
// TokenVal, defined below.
//
// A TokenVal object contains the line number on which the token occurs as
// well as the number of the character on that line that starts the token.
// Some tokens (literals and IDs) also include the value of the token.

class TokenVal {
  // fields
    int linenum;
    int charnum;
  // constructor
    TokenVal(int line, int ch) {
        linenum = line;
        charnum = ch;
    }
}

class IntLitTokenVal extends TokenVal {
  // new field: the value of the integer literal
    int intVal;
  // constructor
    IntLitTokenVal(int line, int ch, int val) {
        super(line, ch);
        intVal = val;
    }
}

class IdTokenVal extends TokenVal {
  // new field: the value of the identifier
    String idVal;
  // constructor
    IdTokenVal(int line, int ch, String val) {
        super(line, ch);
    idVal = val;
    }
}

class StrLitTokenVal extends TokenVal {
  // new field: the value of the string literal
    String strVal;
  // constructor
    StrLitTokenVal(int line, int ch, String val) {
        super(line, ch);
        strVal = val;
    }
}

// The following class is used to keep track of the character number at which
// the current token starts on its line.
class CharNum {
    static int num=1;
}
%%

DIGIT=        [0-9]
SPACE=        [\040\t]

%implements java_cup.runtime.Scanner
%function next_token
%type java_cup.runtime.Symbol

%eofval{
return new Symbol(sym.EOF);
%eofval}

%line

%%

\n        {
    // NEWLINE
    CharNum.num = 1; 
}

{SPACE}+ {
    // WHITESPACE (horiz tabs, space)
    CharNum.num += yytext().length(); 
}


//.*$ { 
    // COMMENT
    CharNum.num = 1; 
}

##.*$ { 
    // COMMENT
    CharNum.num = 1; 
}

bool {
    // RESERVED WORD #1 ...
    Symbol s = new Symbol(sym.BOOL, new TokenVal(yyline+1, CharNum.num));
    CharNum.num += 4;
    return s;
}

int {
    Symbol s = new Symbol(sym.INT, new TokenVal(yyline+1, CharNum.num));
    CharNum.num += 3;
    return s;
}

void {
    Symbol s = new Symbol(sym.VOID, new TokenVal(yyline+1, CharNum.num));
    CharNum.num += 4;
    return s;
}

true {
    Symbol s = new Symbol(sym.TRUE, new TokenVal(yyline+1, CharNum.num));
    CharNum.num += 4;
    return s;
}

false {
    Symbol s = new Symbol(sym.FALSE, new TokenVal(yyline+1, CharNum.num));
    CharNum.num += 5;
    return s;
}

struct {
    Symbol s = new Symbol(sym.STRUCT, new TokenVal(yyline+1, CharNum.num));
    CharNum.num += 6;
    return s;
}

cin {
    Symbol s = new Symbol(sym.CIN, new TokenVal(yyline+1, CharNum.num));
    CharNum.num += 3;
    return s;
}

cout {
    Symbol s = new Symbol(sym.COUT, new TokenVal(yyline+1, CharNum.num));
    CharNum.num += 4;
    return s;
}

if {
    Symbol s = new Symbol(sym.IF, new TokenVal(yyline+1, CharNum.num));
    CharNum.num += 2;
    return s;
}

else {
    Symbol s = new Symbol(sym.ELSE, new TokenVal(yyline+1, CharNum.num));
    CharNum.num += 4;
    return s;
}

while {
    Symbol s = new Symbol(sym.WHILE, new TokenVal(yyline+1, CharNum.num));
    CharNum.num += 5;
    return s;
}

return {
    // RESERVED WORD #12
    Symbol s = new Symbol(sym.RETURN, new TokenVal(yyline+1, CharNum.num));
    CharNum.num += 6;
    return s;
}

[a-zA-Z_][a-zA-Z0-9_]* {
    // IDENTIFIER
    Symbol s = new Symbol(sym.ID, new IdTokenVal(yyline+1, CharNum.num, yytext()));
    CharNum.num += yytext().length();
    return s;
}

{DIGIT}+ { 
    // POSITIVE INT LITERAL
    Symbol s;
    try {
        int val = Integer.parseInt(yytext());
        s = new Symbol(sym.INTLITERAL, new IntLitTokenVal(yyline+1, CharNum.num, val));
    } catch (NumberFormatException e) {
        ErrMsg.warn(yyline+1, CharNum.num, "integer literal too large; using max value");
        s = new Symbol(sym.INTLITERAL, new IntLitTokenVal(yyline+1, CharNum.num, Integer.MAX_VALUE));
    }
    CharNum.num += yytext().length();
    return s;
}

\"([^\n\\\"]|\\n|\\t|\\\?|\\\\|\\'|\\\")*\" {
    // STRING LITERAL
    Symbol s = new Symbol(sym.STRINGLITERAL, new StrLitTokenVal(yyline+1, CharNum.num, yytext()));
    CharNum.num += yytext().length();
    return s;
}

\"([^\n\\\"]|\\n|\\t|\\\?|\\\\|\\'|\\\")*$ {
    // UNTERMINATED STRING LITERAL
    ErrMsg.warn(yyline+1, CharNum.num, "unterminated string literal ignored");
    CharNum.num += yytext().length();
}

\"([^\n\\\"]|\\.)*\" {
    // BAD STRING LITERAL
    // Should match STRING LITERAL pattern first if all escapes are legal, otherwise it falls back to here
    ErrMsg.warn(yyline+1, CharNum.num, "string literal with bad escaped character ignored");
    CharNum.num += yytext().length();
}

\"([^\n\\\"]|\\.)*$ {
    // BAD UNTERMINATED STRING LITERAL
    // Should match STRING LITERAL pattern first if all escapes are legal, otherwise it falls back to here
    ErrMsg.warn(yyline+1, CharNum.num, "unterminated string literal with bad escaped character ignored");
    CharNum.num += yytext().length();
}

"{" { 
    // LEFT CURLY BRACE
    Symbol s = new Symbol(sym.LCURLY, new TokenVal(yyline+1, CharNum.num));
    CharNum.num++;
    return s;
}

"}" { 
    // RIGHT CURLY BRACE
    Symbol s = new Symbol(sym.RCURLY, new TokenVal(yyline+1, CharNum.num));
    CharNum.num++;
    return s;
}

"(" { 
    // LEFT PARENTHESIS
    Symbol s = new Symbol(sym.LPAREN, new TokenVal(yyline+1, CharNum.num));
    CharNum.num++;
    return s;
}

")" { 
    // RIGHT PARENTHESIS
    Symbol s = new Symbol(sym.RPAREN, new TokenVal(yyline+1, CharNum.num));
    CharNum.num++;
    return s;
}

";" { 
    // SEMICOLON
    Symbol s = new Symbol(sym.SEMICOLON, new TokenVal(yyline+1, CharNum.num));
    CharNum.num++;
    return s;
}

"," { 
    // COMMA
    Symbol s = new Symbol(sym.COMMA, new TokenVal(yyline+1, CharNum.num));
    CharNum.num++;
    return s;
}

"." { 
    // PERIOD
    Symbol s = new Symbol(sym.DOT, new TokenVal(yyline+1, CharNum.num));
    CharNum.num++;
    return s;
}

"<<" { 
    // WRITE OPERATOR
    Symbol s = new Symbol(sym.WRITE, new TokenVal(yyline+1, CharNum.num));
    CharNum.num += 2;
    return s;
}

">>" { 
    // READ OPERATOR
    Symbol s = new Symbol(sym.READ, new TokenVal(yyline+1, CharNum.num));
    CharNum.num += 2;
    return s;
}

"++" { 
    // PLUS-PLUS OPERATOR
    Symbol s = new Symbol(sym.PLUSPLUS, new TokenVal(yyline+1, CharNum.num));
    CharNum.num += 2;
    return s;
}

"--" { 
    // MINUS-MINUS OPERATOR
    Symbol s = new Symbol(sym.MINUSMINUS, new TokenVal(yyline+1, CharNum.num));
    CharNum.num += 2;
    return s;
}

"+" { 
    // PLUS OPERATOR
    Symbol s = new Symbol(sym.PLUS, new TokenVal(yyline+1, CharNum.num));
    CharNum.num++;
    return s;
}

"-" { 
    // MINUS OPERATOR
    Symbol s = new Symbol(sym.MINUS, new TokenVal(yyline+1, CharNum.num));
    CharNum.num++;
    return s;
}

"*" { 
    // MULTIPLY OPERATOR
    Symbol s = new Symbol(sym.TIMES, new TokenVal(yyline+1, CharNum.num));
    CharNum.num++;
    return s;
}

"/" { 
    // DIVIDE OPERATOR
    Symbol s = new Symbol(sym.DIVIDE, new TokenVal(yyline+1, CharNum.num));
    CharNum.num++;
    return s;
}

"!" { 
    // NOT OPERATOR
    Symbol s = new Symbol(sym.NOT, new TokenVal(yyline+1, CharNum.num));
    CharNum.num++;
    return s;
}

"&&" { 
    // AND OPERATOR
    Symbol s = new Symbol(sym.AND, new TokenVal(yyline+1, CharNum.num));
    CharNum.num += 2;
    return s;
}

"||" { 
    // OR OPERATOR
    Symbol s = new Symbol(sym.OR, new TokenVal(yyline+1, CharNum.num));
    CharNum.num += 2;
    return s;
}

"==" { 
    // EQUALS OPERATOR
    Symbol s = new Symbol(sym.EQUALS, new TokenVal(yyline+1, CharNum.num));
    CharNum.num += 2;
    return s;
}

"!=" { 
    // NOT EQUALS OPERATOR
    Symbol s = new Symbol(sym.NOTEQUALS, new TokenVal(yyline+1, CharNum.num));
    CharNum.num += 2;
    return s;
}

"<" { 
    // LESS THAN OPERATOR
    Symbol s = new Symbol(sym.LESS, new TokenVal(yyline+1, CharNum.num));
    CharNum.num++;
    return s;
}

">" { 
    // GREATER OPERATOR
    Symbol s = new Symbol(sym.GREATER, new TokenVal(yyline+1, CharNum.num));
    CharNum.num++;
    return s;
}

"<=" { 
    // LESS THAN OR EQUALS OPERATOR
    Symbol s = new Symbol(sym.LESSEQ, new TokenVal(yyline+1, CharNum.num));
    CharNum.num += 2;
    return s;
}

">=" { 
    // GREATER THAN OR EQUALS OPERATOR
    Symbol s = new Symbol(sym.GREATEREQ, new TokenVal(yyline+1, CharNum.num));
    CharNum.num += 2;
    return s;
}

"=" { 
    // ASSIGNMENT OPERATOR
    Symbol s = new Symbol(sym.ASSIGN, new TokenVal(yyline+1, CharNum.num));
    CharNum.num++;
    return s;
}

. { 
    // ILLEGAL CHARACTER
    ErrMsg.fatal(yyline+1, CharNum.num, "illegal character ignored: " + yytext());
    CharNum.num++;
}
