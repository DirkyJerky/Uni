int x;
bool y;
int fn1() {
}

bool fn2(int x, bool y) {
}

struct stru{
    int x;
    bool y;
};

void allStmts() {
    int ib;
    int x;
    int y;
    int a;
    int b;
    bool c;
    bool i;
    bool h;
    bool j;
    bool k;
    bool l;
    bool m;
    bool n;
    bool o;
    bool p;
    bool q;
    int r;
    int s;
    int t;
    int u;
    if ((ib(int) == (-1))) {
        x(int) = ((4 + (3 * 5)) - y(int));
        while (c(bool)) {
            y(int) = ((y(int) * 2) + x(int));
        }
    }
    else {
        x(int) = 0;
    }
    a(int) = 1;
    b(int)++;
    b(int)--;
    cin >> b(int);
    cout << c(bool);
    if (c(bool)) {
    }
    if (q(bool)) {
        int g;
    }
    if (h(bool)) {
        return;
    }
    if (i(bool)) {
        bool i;
        return;
    }
    if (j(bool)) {
    }
    else {
    }
    if (k(bool)) {
        bool k;
    }
    else {
        return;
    }
    if (l(bool)) {
        return;
    }
    else {
        bool l;
    }
    if (m(bool)) {
        int m;
        return;
    }
    else {
        int m;
        return;
    }
    while (n(bool)) {
    }
    while (o(bool)) {
        bool o;
    }
    while (p(bool)) {
        return;
    }
    while (q(bool)) {
        return;
    }
    repeat (r(int)) {
    }
    repeat (s(int)) {
        bool s;
    }
    repeat (t(int)) {
        return;
    }
    repeat (u(int)) {
        return;
    }
    return;
    fn1(->int)();
    fn2(int,bool->bool)(1, true);
}

int allIntExps() {
    int a;
    int b;
    int c;
    int d;
    int e;
    int i;
    int j;
    int k;
    int l;
    int m;
    int n;
    int o;
    int p;
    bool out;
    struct stru s;
    return (a(int) = 1);
    return (b(int) + b(int));
    return (c(int) - c(int));
    return (d(int) * d(int));
    return (e(int) / e(int));
    out(bool) = (i(int) == i(int));
    out(bool) = (j(int) != j(int));
    out(bool) = (k(int) < k(int));
    out(bool) = (l(int) > l(int));
    out(bool) = (m(int) <= m(int));
    out(bool) = (n(int) >= n(int));
    return (-o(int));
    return p(int);
    return s(stru).x(int);
    return 0;
    return 100000;
    return fn1(->int)();
}

bool allBoolExps() {
    bool a;
    bool f;
    bool g;
    bool h;
    bool i;
    bool j;
    bool p;
    struct stru s;
    return (a(bool) = true);
    return (!f(bool));
    return (g(bool) && g(bool));
    return (h(bool) || h(bool));
    return (i(bool) == i(bool));
    return (j(bool) != j(bool));
    return p(bool);
    return s(stru).y(bool);
    return true;
    return false;
    return fn2(int,bool->bool)(1, true);
}

