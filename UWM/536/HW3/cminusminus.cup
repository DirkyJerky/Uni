/**********************************************************************
 Java CUP specification for a parser for C-- programs.
 **********************************************************************/

import java_cup.runtime.*;
import java.util.*;

/*
 * The code below redefines method syntax_error to give better error messages
 * than just "Syntax error".
 */
parser code {:

public void syntax_error(Symbol currToken) {
    if (currToken.value == null) {
        ErrMsg.fatal(0,0, "Syntax error at end of file");
    }
    else {
        ErrMsg.fatal(((TokenVal)currToken.value).linenum,
                     ((TokenVal)currToken.value).charnum,
                     "Syntax error");
    }
    System.exit(-1);
}
:};


/* Terminals (tokens returned by the scanner). */
terminal                INT;
terminal                BOOL;
terminal                VOID;
terminal                TRUE;
terminal                FALSE;
terminal                STRUCT;
terminal                CIN;
terminal                COUT;
terminal                IF;
terminal                ELSE;
terminal                WHILE;
terminal                REPEAT;
terminal                RETURN;
terminal IdTokenVal     ID;
terminal IntLitTokenVal INTLITERAL;
terminal StrLitTokenVal STRINGLITERAL;
terminal                LCURLY;
terminal                RCURLY;
terminal                LPAREN;
terminal                RPAREN;
terminal                SEMICOLON;
terminal                COMMA;
terminal                DOT;
terminal                WRITE;
terminal                READ;
terminal                PLUSPLUS;
terminal                MINUSMINUS;
terminal                PLUS;
terminal                MINUS;
terminal                TIMES;
terminal                DIVIDE;
terminal                NOT;
terminal                AND;
terminal                OR;
terminal                EQUALS;
terminal                NOTEQUALS;
terminal                LESS;
terminal                GREATER;
terminal                LESSEQ;
terminal                GREATEREQ;
terminal                ASSIGN;


/* Non-terminals
 *
 * NOTE: You will need to add more non-terminals to this list as you
 *       add productions to the grammar below.
 */
non terminal ProgramNode      program;
non terminal LinkedList       declList; // List<DeclNode>
non terminal DeclNode         decl;
non terminal LinkedList       varDeclList; // List<VarDeclNode>
non terminal VarDeclNode      varDecl;
non terminal FnDeclNode       fnDecl;
non terminal StructDeclNode   structDecl;
non terminal LinkedList       structBody; // List<DeclNode>
non terminal FormalsListNode  formals;
non terminal LinkedList       formalsList; // List<FormalDeclNode>
non terminal FormalDeclNode   formalDecl;
non terminal FnBodyNode       fnBody;
non terminal LinkedList       stmtList; // List<StmtNode>
non terminal StmtNode         stmt;
non terminal AssignNode       assignExp;
non terminal ExpNode          exp;
non terminal ExpNode          term; // IntLitNode | StringLitNode | TrueNode | FalseNode | ExpNode | CallExpNode
non terminal CallExpNode      fncall;
non terminal LinkedList       actualList; // List<ExpNode>
non terminal TypeNode         type;
non terminal ExpNode          loc; // IdNode | DotAccessExpNode
non terminal IdNode           id;


/* Precedences
 *
 * NOTE: Add precedence and associativity declarations here.
 *
 */
precedence right ASSIGN;
precedence left OR;
precedence left AND;
precedence nonassoc LESS, GREATER, LESSEQ, GREATEREQ, EQUALS, NOTEQUALS;
precedence left PLUS, MINUS;
precedence left TIMES, DIVIDE;
precedence left DOT;
precedence left NOT; // Unary minus is aliased to the NOT precedence in the `exp` production

start with program;


/* The grammar with actions
 *
 * NOTE: add more grammar rules below.
 *
 */
program         ::= declList: d
                {:
                	RESULT = new ProgramNode(new DeclListNode(d));
                :}
                ;

declList        ::= declList:dl decl:d
                {:
                	dl.addLast(d);
                	RESULT = dl;
                :}
                | // e
                {:
                	RESULT = new LinkedList<DeclNode>();
                :}
                ;

decl            ::= varDecl:v
                {:
                	RESULT = v;
                :}
                | fnDecl:f
                {: 
                	RESULT = f;
                :}
                | structDecl:s
                {:
                	RESULT = s;
                :}
                ;

varDeclList     ::= varDeclList:l varDecl:v
                {:
                	l.addLast(v);
                	RESULT = l;
                :}
                | // e
                {:
                	RESULT = new LinkedList<>();
                :}
                ;

varDecl         ::= type:t id:i SEMICOLON
                {:
                	RESULT = new VarDeclNode(t, i, VarDeclNode.NOT_STRUCT);
                :}
                | STRUCT id:sId id:i SEMICOLON
                {:
                	RESULT = new VarDeclNode(new StructNode(sId), i, 0);
                :}
                ;

fnDecl          ::= type:t id:i formals:f fnBody:b
                {:
                	RESULT = new FnDeclNode(t, i, f, b);
                :}
                ;

structDecl      ::= STRUCT id:i LCURLY structBody:b RCURLY SEMICOLON
                {:
                	RESULT = new StructDeclNode(i, new DeclListNode(b));
                :}
                ;

structBody      ::= structBody:b varDecl:v
                {:
                	b.addLast(v);
                	RESULT = b;
                :}
                | varDecl:v
                {:
                	LinkedList<DeclNode> list = new LinkedList<>();
                	list.addLast(v);
                	RESULT = list;
                :}
                ;

formals         ::= LPAREN RPAREN
                {:
                	RESULT = new FormalsListNode(new LinkedList<>());
                :}
                | LPAREN formalsList:f RPAREN
                {:
                	RESULT = new FormalsListNode(f);
                :}
                ;

formalsList     ::= formalDecl:f
                {:
                	LinkedList<FormalDeclNode> list = new LinkedList<>();
                	list.addLast(f);
                	RESULT = list;
                :}
                | formalDecl:f COMMA formalsList:l
                {:
                	l.addLast(f);
                	RESULT = l;
                :}
                ;

formalDecl      ::= type:t id:i
                {:
                	RESULT = new FormalDeclNode(t, i);
                :}
                ;

fnBody          ::= LCURLY varDeclList:v stmtList:s RCURLY
                {:
                	// Implicitly converts LinkedList<VarDeclNode> to LinkedList<DeclNode>?
                	RESULT = new FnBodyNode(new DeclListNode(v), new StmtListNode(s)); 
                :}
                ;

stmtList        ::= stmtList:l stmt:s
                {:
                	l.addLast(s);
                	RESULT = l;
                :}
                | // e
                {:
                	RESULT = new LinkedList<>();
                :}
                ;

stmt            ::= assignExp:a SEMICOLON
                {:
                	RESULT = new AssignStmtNode(a);
                :}
                | loc:l PLUSPLUS SEMICOLON
                {:
                	RESULT = new PostIncStmtNode(l);
                :}
                | loc:l MINUSMINUS SEMICOLON
                {:
                	RESULT = new PostDecStmtNode(l);
                :}
                | CIN READ loc:l SEMICOLON
                {:
                	RESULT = new ReadStmtNode(l);
                :}
                | COUT WRITE exp:e SEMICOLON
                {:
                	RESULT = new WriteStmtNode(e);
                :}
                | IF LPAREN exp:pred RPAREN LCURLY varDeclList:vTrue stmtList:sTrue RCURLY
                {:
                	RESULT = new IfStmtNode(pred, new DeclListNode(vTrue), new StmtListNode(sTrue));
                :}
                | IF LPAREN exp:pred RPAREN LCURLY varDeclList:vTrue stmtList:sTrue RCURLY ELSE LCURLY varDeclList:vFalse stmtList:sFalse RCURLY
                {:
                	RESULT = new IfElseStmtNode(pred, new DeclListNode(vTrue), new StmtListNode(sTrue), new DeclListNode(vFalse), new StmtListNode(sFalse));
                :}
                | WHILE LPAREN exp:pred RPAREN LCURLY varDeclList:v stmtList:s RCURLY
                {:
                	RESULT = new WhileStmtNode(pred, new DeclListNode(v), new StmtListNode(s));
                :}
                | REPEAT LPAREN exp:pred RPAREN LCURLY varDeclList:v stmtList:s RCURLY
                {:
                	RESULT = new RepeatStmtNode(pred, new DeclListNode(v), new StmtListNode(s));
                :}
                | RETURN exp:e SEMICOLON
                {:
                	RESULT = new ReturnStmtNode(e);
                :}
                | RETURN SEMICOLON
                {:
                	RESULT = new ReturnStmtNode(null);
                :}
                | fncall:f SEMICOLON
                {:
                	RESULT = new CallStmtNode(f);
                :}
                ;

assignExp       ::= loc:l ASSIGN exp:e
                {:
                	RESULT = new AssignNode(l, e);
                :}
                ;

exp             ::= assignExp:a
                {:
                	RESULT = a;
                :}
                | exp:e1 PLUS exp:e2
                {:
                	RESULT = new PlusNode(e1, e2);
                :}
                | exp:e1 MINUS exp:e2
                {:
                	RESULT = new MinusNode(e1, e2);
                :}
                | exp:e1 TIMES exp:e2
                {:
                	RESULT = new TimesNode(e1, e2);
                :}
                | exp:e1 DIVIDE exp:e2
                {:
                	RESULT = new DivideNode(e1, e2);
                :}
                | NOT exp:e
                {:
                	RESULT = new NotNode(e);
                :}
                | exp:e1 AND exp:e2
                {:
                	RESULT = new AndNode(e1, e2);
                :}
                | exp:e1 OR exp:e2
                {:
                	RESULT = new OrNode(e1, e2);
                :}
                | exp:e1 EQUALS exp:e2
                {:
                	RESULT = new EqualsNode(e1, e2);
                :}
                | exp:e1 NOTEQUALS exp:e2
                {:
                	RESULT = new NotEqualsNode(e1, e2);
                :}
                | exp:e1 LESS exp:e2
                {:
                	RESULT = new LessNode(e1, e2);
                :}
                | exp:e1 GREATER exp:e2
                {:
                	RESULT = new GreaterNode(e1, e2);
                :}
                | exp:e1 LESSEQ exp:e2
                {:
                	RESULT = new LessEqNode(e1, e2);
                :}
                | exp:e1 GREATEREQ exp:e2
                {:
                	RESULT = new GreaterEqNode(e1, e2);
                :}
                | MINUS term:t
                {:
                	RESULT = new UnaryMinusNode(t);
                :}
                %prec NOT
                | term:t
                {:
                	RESULT = t;
                :}
                ;

term          ::= loc:l
                {:
                	RESULT = l;
                :}
                | INTLITERAL:i
                {:
                	RESULT = new IntLitNode(i.linenum, i.charnum, i.intVal);
                :}
                | STRINGLITERAL:s
                {:
                	RESULT = new StringLitNode(s.linenum, s.charnum, s.strVal);
                :}
                | TRUE:t
                {:
                	RESULT = new TrueNode(((TokenVal) t).linenum, ((TokenVal) t).charnum);
                :}
                | FALSE:f
                {:
                	RESULT = new FalseNode(((TokenVal) f).linenum, ((TokenVal) f).charnum);
                :}
                | LPAREN exp:e RPAREN
                {:
                	RESULT = e;
                :}
                | fncall:f
                {:
                	RESULT = f;
                :}
                ;

fncall          ::= id:i LPAREN RPAREN
                {:
                	RESULT = new CallExpNode(i, null);
                :}
                | id:i LPAREN actualList:l RPAREN
                {:
                	RESULT = new CallExpNode(i, new ExpListNode(l));
                :}
                ;

actualList      ::= exp:e
                {:
                	LinkedList<ExpNode> list = new LinkedList<>();
                	list.addLast(e);
                	RESULT = list;
                :}
                | actualList:l COMMA exp:e
                {:
                	l.addLast(e);
                	RESULT = l;
                :}
                ;

type            ::= INT
                {: RESULT = new IntNode();
                :}
                | BOOL
                {: RESULT = new BoolNode();
                :}
                | VOID
                {: RESULT = new VoidNode();
                :}
                ;

loc             ::= id:i
                {:
                	RESULT = i;
                :}
                | loc:l DOT id:i
                {:
                	RESULT = new DotAccessExpNode(l, i);
                :}
                ;

id              ::= ID:i
                {: RESULT = new IdNode(i.linenum, i.charnum, i.idVal);
                :}
                ;
                
                
